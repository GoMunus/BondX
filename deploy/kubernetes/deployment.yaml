apiVersion: apps/v1
kind: Deployment
metadata:
  name: bondx-backend
  namespace: bondx
  labels:
    app: bondx-backend
    environment: production
    version: v0.1.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: bondx-backend
      environment: production
  template:
    metadata:
      labels:
        app: bondx-backend
        environment: production
        version: v0.1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Pod disruption budget ensures high availability
      terminationGracePeriodSeconds: 30
      containers:
      - name: bondx-backend
        image: bondx-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        
        # Environment variables from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: bondx-config
        - secretRef:
            name: bondx-secrets
        
        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        
        # Volume mounts for logs and data
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
      
      # Volumes
      volumes:
      - name: logs
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      
      # Security context for the pod
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      
      # Affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bondx-backend
              topologyKey: kubernetes.io/hostname
        
        # Node affinity for production nodes
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/production
                operator: In
                values:
                - "true"
      
      # Tolerations for production nodes
      tolerations:
      - key: "node-role.kubernetes.io/production"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
