apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bondx-ingress
  namespace: bondx
  labels:
    app: bondx-backend
    environment: production
  annotations:
    # Nginx Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/session-cookie-name: "bondx_session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "3600"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"
    
    # CORS
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://bondx.com,https://www.bondx.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Cert Manager for automatic SSL
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/common-name: "bondx.com"
spec:
  tls:
  - hosts:
    - bondx.com
    - www.bondx.com
    - api.bondx.com
    - ws.bondx.com
    secretName: bondx-tls
  rules:
  # Main API
  - host: api.bondx.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bondx-backend-service
            port:
              number: 80
  # WebSocket endpoint
  - host: ws.bondx.com
    http:
      paths:
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: bondx-backend-service
            port:
              number: 8080
  # Main domain
  - host: bondx.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bondx-backend-service
            port:
              number: 80
  # www subdomain
  - host: www.bondx.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bondx-backend-service
            port:
              number: 80
---
# Certificate for TLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bondx-cert
  namespace: bondx
spec:
  secretName: bondx-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - bondx.com
  - www.bondx.com
  - api.bondx.com
  - ws.bondx.com
