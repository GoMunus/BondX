version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bondx_postgres
    environment:
      POSTGRES_DB: bondx_db
      POSTGRES_USER: bondx_user
      POSTGRES_PASSWORD: bondx_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bondx_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bondx_user -d bondx_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bondx_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bondx_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # BondX Backend
  bondx_backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bondx_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://bondx_user:bondx_password@postgres:5432/bondx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bondx_network
    command: uvicorn bondx.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bondx_celery_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://bondx_user:bondx_password@postgres:5432/bondx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bondx_network
    command: celery -A bondx.celery_app worker --loglevel=info

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bondx_celery_beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://bondx_user:bondx_password@postgres:5432/bondx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bondx_network
    command: celery -A bondx.celery_app beat --loglevel=info

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: bondx_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - bondx_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: bondx_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - bondx_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bondx_network:
    driver: bridge
